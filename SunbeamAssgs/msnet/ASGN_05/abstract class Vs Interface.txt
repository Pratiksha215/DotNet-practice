Abstract VS Interface in C#


Abstract Class : -


1. It contains both declaration and definition part.
2. Multiple inheritance is not achieved by abstract class.
3. It contain Constructor.
4. It can contain static members.
5. It can contain different types of access modifiers like public, private, protected etc.
6. The performance of an abstract class is fast
7. It is used to implement the core identity of class.
8. A class can only use one abstract class.
9. If many implementations are of the same kind and use common behavior, then it is superior      to use abstract class.
10. Abstract class can contain methods, fields, constants, etc.
11. It can be fully, partially or not implemented.


Interface : -
1. It contains only a declaration part.
2. Multiple inheritance is achieved by interface.
3. It does not contain Constructor.
4. It does not contain static members.
5. It only contains public access modifier because everything in the interface is public.
6. The performance of interface is slow because it requires time to search actual method in the corresponding class.
7. It is used to implement peripheral abilities of class.
8. A class can use multiple interface.
9. If many implementations only share methods, then it is superior to use Interface.
10. Interface can only contain methods .
11. It should be fully implemented.
